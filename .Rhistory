1:length(my_seq)
seq(along.with=my_seq)
seq_along(my_seq)
rep(0,times=40)
rep(c(0,1,2),times=10)
rep(c(0,1,2),each=10)
library(swirl)
ls()
rm(list =ls())
swirl()
TRUE==TRUE
(FALSE==TRUE)==FALSE
6== 7
6 <7
10 <= 10
5 != 7
!(5==7)
FALSE & FALSE
TRUE & c(TRUE, FALSE, FALSE)
TRUE && c(TRUE, FALSE, FALSE)
TRUE | c(TRUE, FALSE, FALSE)
TRUE || c(TRUE, FALSE, FALSE)
5 < 8 || 6 != 8 && 4 > 3.9
5 > 8 || 6 != 8 && 4 > 3.9
isTRUE( 6 > 4)
identical('twins', 'twins'')
identical('twins', 'twins')
identical('twins', 'twins')
xor(5==6,!FALSE)
ints <- sample(10)
ints
ints > 5
which(ints > 7)
any(ints < 0)
all(ints > 0)
Sys.date()
Sys.Date()
mean(c(2,4,5))
submit()
boring_function('My first function!')
boring_function
submit()
my_mean(c(4,5,10))
submit()
remainder(5)
remainder(11,5)
remainder(divisor=11, num=5)
remainder(4, div =2)
args(remainder)
submit()
evaluate(sd, c(1.4, 3.6, 7.9, 8.8))
evaluate(function(x){x+1}, 6)
evaluate(function(x){head(x)}, c(8, 4, 0))
evaluate(function(x){x[1]}, c(8, 4, 0))
evaluate(function(x){x[length(x)]}, c(8, 4, 0))
?paste
paste("Programming", "is", "fun")
paste("Programming", "is", "fun!")
submit()
telegram("My", "own", "Telegram")
submit()
submit()
mad_libs("Munich","nice","sculpture")
submit()
'I' %p% 'love' %p% 'R!'
library(swirl)
ls()
rm(list=ls())
ls()
swirl()
head(flags)
dim(flags)
class(flags)
cls_list <- lapply(flags, class)
cls_list
class(cls_list)
as.character(cls_list)
cls_vect <- sapply(flags, class)
class(cls_vect)
sum(flags$orange)
flag_colors <- flags[, 11:17]
head(flag_colors)
lapply(flag_colors, sum)
sapply(flag_colors, sum)
sapply(flag_colors, mean)
flag_shapes <- flags[, 19.23]
flag_shapes <- flags[, 19:23]
lapply(flag_shapes, range)
shape_mat <- sapply(flag_shapes, range)
shape_mat
class(shape_mat)
unique(c(3,4,5,5,5,6,6))
unique_vals <- lapply(flags, unique)
unique_vals
apply(unique_vals, length)
sapply(unique_vals, length)
sapply(flags, unique)
lapply(unique_vals, function(elem) elem[2])
sapply(flags, unique)
vapply(flags, unique)
vapply(flags, unique, numeric(1))
ok()
sapply(flags, class)
vapply(flags, class, character(1))
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$animate, flags$landmass, mean)
tapply(flags$population, flags$red, summary)
tapply(flags$population, flags$landmass, summary)
mean(x)
traceback()
lm(y-x)
traceback()
debug(lm)
lm(y-x)
options(error = recover)
read.csv("nosuchfile")
library(swirl)
ls()
rm(list =ls())
swirl()
ls()
class(plants)
dim(plants)
nrow(plants)
ncol(plants)
object.size(plants)
names(plants)
head(plants)
head(plants, 10)
tail(plants,15)
summary(plants)
table(plants$Active_Growth_Period)
str(plants)
?sample
sample(1:6, 4, replace = TRUE)
sample(1:6, 4, replace = TRUE)
sample(1:20,10)
LETTERS
sample(LETTERS)
flips <- sample(c(0,1), 100, replace = TRUE, c(0.3, 0.7))
flips
sum(flips)
?rbinom
rbinom(1, size =100, prob = 0.7)
flips2 <- rbinom(1, size = 100, prob=0.7)
flips2 <- rbinom(n=100, size = 1, prob=0.7)
flips2
sum(flips2)
?rnorm
rnorm(10)
rnorm(10,100,25)
rpois(5, 10)
replicate(100, rpois(5,10))
my_pois <- replicate(100, rpois(5,10))
my_pois
cm <- colMeans(my_pois)
hist(cm)
data(cars)
?cars
head(cars)
plot(cars)
?plot
plot(x=cars$speed, y= cars$dist)
plot(y=cars$speed, x= cars$dist)
plot(x=cars$speed, y= cars$dist, xlab = "Speed")
plot(x=cars$speed, y= cars$dist, xlab = "Speed", ylab = "Stopping Distance")
plot(x=cars$speed, y= cars$dist, ylab = "Stopping Distance")
plot(x=cars$speed, y= cars$dist, xlab = "Speed", ylab = "Stopping Distance")
plot(cars, main="My Plot")
plot(cars, sub="My Plot Subtitle")
plot(cars, col 02)
plot(cars, col =2)
plot(cars, xlim = c(10,15))
plot(cars, pch =2)
data(mtcars)
play()
dim(mtcars)
str(mtcars)
head(mtcars)
nxt()
?boxplot
boxplot(mpg ~ cyl, data = mtcars)
hist(mtcars$mpg)
set.seed(1)
rpois(5, 2)
set.seed(1000)
rpois(5, 2)
source("http://bioconductor.org/biocLite.R")
biocLite("rhdf5")
library(rhdf5)
created = h5createFile("example.h5")
created
created = h5createGroup("example.h5", "foo")
created = h5createGroup("example.h5", "baa")
created = h5createGroup("example.h5", "foo/foobaa")
h5ls("example.h5")
A = matrix(1:10, nr=5, nc=2)
A
h5write(A, "example.h5", "foo/A")
B = array(seq(0.1, 2.0, by = 0.1), dim = c(5,2,2))
B
attr(B, "scale") <- "liter"
B
str(B)
h5write(B, "example.h5", "foo/foobaa/B")
h5ls("example.h5")
df = dataframe(1L:5L, seq(0,1, length.out=5), c("ab", "cde", "fghi", "a", "s"), stringsAsFactors = FALSE)
df = data.frame(1L:5L, seq(0,1, length.out=5), c("ab", "cde", "fghi", "a", "s"), stringsAsFactors = FALSE)
df
h5write(df, "example.h5", "df")
h5ls("example.h5")
readA = h5read("example.h5", "foo/A")
readB = h5read("example.h5", "foo/foobaa/A")
readB = h5read("example.h5", "foo/foobaa/B")
readdf = h5read("example.h5", "df")
readA
readB
readdf
h5write(c(12,13,14), "example.h5", "foo/A", index=list(1:3,1))
h5read("example.h5", "foo/A")
con = url("http://scholar.google.com/citations?user=HI-I6C0AAAAJ&hl=en")
htmlCode = readLines(Con)
htmlCode = readLines(con)
close(con)
htmlCode
library(XML)
url <- ("http://scholar.google.com/citations?user=HI-I6C0AAAAJ&hl=en")
html <- htmlTreeParse(url, useInternalNodes = T)
library(httr)
html2 = GET(url)
content2 = content(html2, as="text")
parsedHtml = htmlParse(content2, asText=TRUE)
xpathSApply(parsedHtml, "//title", xmlValue)
pg1 = GET("http://httpbin.org/basic-auth/user/passwd")
pg1
pg2 = GET("http://httpbin.org/basic-auth/user/passwd", authenticate("user", "passwd"))
pg2
names(pg2)
library(swirl)
rm(list=ls())
swirl()
library(dplyr)
cran <- table_df(mydf)
cran <- tbl_df(mydf)
rm(mydf)
rm("mydf")
cran
?group_by
by_package <- group_by(cran, package)
by_package
summarize(by_package, mean(size))
submit()
pack_sum
quantile(pack_sum$count, probs = 0.99)
top_counts <- filter(pack_sum, count > 679)
top_counts
View(top_counts)
top_counts_sorted <- arrange(top_counts, desc(count)
)
View(top_counts_sorted)
quantile(pack_sum$unique, probs = 0.99)
top_unique <- filter(pack_sum, unique > 465)
View(top_unique)
top_unique_sorted <- arrange(top_unique, desc(unique))
View(top_unique_sorted)
submit()
submit()
submit()
View(result3)
submit()
submit()
submit()
submit()
submit()
library(tidyr)
students
?gather
gather(students, sex, count, -grade)
students2
res <- gather(students2, sex_class, count, -grade)
res
?separate
separate(res, sex_class, c("sex", "class"))
submit()
students3
submit()
?spread
submit()
submit()
submit()
submit()
library(readr)
parse_number("class_5")
parse_number("class5")
submit()
submit()
students4
submit()
submit()
submit()
passed
failed
passed <- mutate(passed, status = "passed")
failed <- mutate(failed, status = "failed")
bind_rows(passed, failed)
sat
submit()
submit()
submit()
library(swirl)
rm(list=ls())
swirl()
swirl()
Sys.getlocale("LC_TIME")
library(lubridate)
help(package=lubridate)
this_day <- today()
this_day
month(this_day)
wday(this_day)
wday(this_day, label = TRUE)
this_moment <- now()
this_moment
second(this_moment)
ymd("1989-05-17")
my_date <- ymd("1989-05-17")
my_date
class(my_date)
ymd("1989 May 17")
mdy("March 12, 1975")
dmy(25081985)
ymd("192012")
ymd("1920-1-2")
dt1
ymd_hms(dt1)
hms("03:22:14")
dt2
ymd(dt2)
update(this_moment, hours = 8, minutes = 34, seconds = 55)
this_moment
update(this_moment, hours = 19, minutes = 55, seconds = 35)
this_moment <- update(this_moment, hours = 19, minutes = 55, seconds = 35)
this_moment
nyc <- now(tzone = "America/New_York")
nyc
depart <- nyc + days(2)
depart
depart <- update(depart, hours = 17, seconds = 34)
depart <- update(depart, hours = 17, minutes = 34)
depart
arrive <- depart + hours(15) + minutes(50)
?with_tz
arrive <- with_tz(arrive, tzone = "Asia/Hong_Kong")
arrive
last_time <- mdy("June 17, 2008", tz = "Singapore")
last_time
?intervall()
?interval()
?interval
how_long <- interval(last_time, arrive)
as.period(how_long)
stopwatch()
pattern <- "[Bb]ush (+[^ ]+ +){1,5}debate"
pattern <- "[Bb]ush( +[^ ]+ +){1,5}debate"
pattern1 <- "[Bb]ush( +[^ ]+ +){1,5}debate"
pattern2 <- "[Bb]ush ([^ ]+ +){1,5}debate"
x <- c("Bush has historically won all major debates he's done.",
"in my view, Bush doesn't need these debates..",
"Felix, I don't disagree that Bush was poorly prepared for
the debate",
"Keep repeating that Bush smirked and scowled during the
debate",
"Bush one word three words five six debate",
"Bush debates Kerry",
"Bush doesn't debate anymore",
"Bush onespace  twospace  twospace  debate")
grep(pattern1, x, value = TRUE)
grep(pattern2, x, value = TRUE)
x <- c("Bush has historically won all major debates he's done.", "in my view, Bush doesn't need these debates..",
"Felix, I don't disagree that Bush was poorly prepared for
the debate",
"Keep repeating that Bush smirked and scowled during the
debate",
"Bush one word three words five six debate",
"Bush debates Kerry",
"Bush doesn't debate anymore",
"Bush onespace  twospace  twospace  debate")
x <- c("Bush has historically won all major debates he's done.", "in my view, Bush doesn't need these debates..",
"Felix, I don't disagree that Bush was poorly prepared for the debate",
"Keep repeating that Bush smirked and scowled during the debate",
"Bush one word three words five six debate",
"Bush debates Kerry",
"Bush doesn't debate anymore",
"Bush onespace  twospace  twospace  debate")
grep(pattern1, x, value = TRUE)
grep(pattern2, x, value = TRUE)
pattern1 <- "[Bb]ush( +[^ ]+ +){1,5} debate"
grep(pattern1, x, value = TRUE)
x <- rnorm(100)
hist(x)
x
y <- rnorm(100)
plot(x, y)
plot(x, y, pch = 3)
plot(x, y, pch = 4)
example(points)
x <- rnorm(100)
y <- rnorm(100)
plot(x, y, pch = 3)
plot(x, y, pch = 20)
title("Mytitle")
text(-1, 1, "Unsinn")
legend("bottomright", legend = "MyData", pch = 4)
fit <- lm(y-x)
fit <- lm( y - x)
y-x
lm(y-x)
line(x,y)
abline(line(x,y))
abline(line(x,y), lwd = 3, col="yellow")
z <- rpois(100,2)
par(mfrow = c(2,1))
plot(x,y)
plot(x,z)
g <- gl(2,50)
g <- gl(2,50, labels = c("m", "f"))
par(mfrow = c(1,1))
plot(x,y, type = "n")
points(x[g=="m"], y[g=="m"], col = green)
points(x[g=="m"], y[g=="m"], col = "green")
points(x[g=="f"], y[g=="f"], col = "pink")
setwd("~/my_R_workingDir/Getting and Cleaning Data/Week 4/project/getdata_projectfiles_UCI HAR Dataset/UCI HAR Dataset/Getting-and-Cleaning-Data-Course-Project/.git")
ls
setwd("~/my_R_workingDir/Exploratory Data Analysis/Week 1/Course Project 1/exdata_data_household_power_consumption/ExData_Plotting1")
epcdata <- read.table("household_power_consumption.txt")
dim(epcdata)
str(epcdata)
epcdata <- read.table("household_power_consumption.txt", header = TRUE, sep = ";")
dim(epcdata)
str(epcdata)
epcdata <- read.table("household_power_consumption.txt", header = TRUE, sep = ";", na.strings = "?", colClasses = c("Date", "POSIXct", numeric, numeric, numeric, numeric, numeric, numeric, numeric))
epcdata <- read.table("household_power_consumption.txt", header = TRUE, sep = ";", na.strings = "?", colClasses = c(character, character, numeric, numeric, numeric, numeric, numeric, numeric, numeric))
myvect <- c(character, character, numeric, numeric, numeric, numeric, numeric, numeric, numeric)
myvect
myvect <- c("character", "character", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric")
myvect
epcdata <- read.table("household_power_consumption.txt", header = TRUE, sep = ";", na.strings = "?", colClasses = c("character", "character", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric"))
dim(epcdata)
str(epcdata)
head(epcdata)
epcsubdata <- epcdata[, Date == "01/02/2007"]
epcsubdata <- epcdata[, "Date" == "01/02/2007"]
head(epcsubdata)
epcsubdata <- epcdata[, "Date" == "1/2/2007"]
head(epcsubdata)
epcsubdata
epcsubdata <- subset(epcdata, Date == "1/2/2007")
epcsubdata
head(epcsubdata)
dim(epcsubdata)
epcsubdata <- subset(epcdata, Date == "2/2/2007")
dim(epcsubdata)
epcsubdata <- subset(epcdata, Date == "1/2/2007" | Date == "2/2/2007")
dim(epcsubdata)
epcdates <- as.Date(epcsubdata$Date)
str(epcdates)
epcdates <- as.Date(epcsubdata$Date, format = "%d/%m/%y")
str(epcdates)
head(epcsubdata$Date)
epcdates <- as.Date(epcsubdata$Date, format = "%d/%m/%Y")
str(epcdates)
tail(epcdates)
head(epcdata$Time)
epctimes <- strptime(epcsubdata$Time, format = "%H:%M:%S")
head(epctimes)
?strptimes
?strptime
epctimes <- strptime(epcsubdata$Time)
tail(epctimes)
epcdatetime <- strptime(paste(epcsubdata$Date, epcsubdata$Time, sep = " "), format = "%d/%m/%Y %H:%M:%S")
head(epcdatetime)
head(epcdata)
head(epcsubdata)
epcdatetime <- strptime(paste(epcsubdata$Date, epcsubdata$Time, sep = " "), format = "%d/%m/%Y %H:%M:%S")
head(epcdatetime)
hist(epcsubdata$Global_active_power)
title(main = "Global Active Power")
hist(epcsubdata$Global_active_power, main = "Gloabl")
hist(epcsubdata$Global_active_power, main = "Global Active Power", xlab = "Global Active Power (kilowatts)", col = "red")
hist(epcsubdata$Global_active_power, main = "Global Active Power", xlab = "Global Active Power (kilowatts)", col = "red", ylim = c(0, 200, 400, 600, 800, 1000, 1200))
hist(epcsubdata$Global_active_power, main = "Global Active Power", xlab = "Global Active Power (kilowatts)", col = "red", ylim = c(0,1200))
png(filename = "plot1.png", width =480, height = 480)
hist(epcsubdata$Global_active_power, main = "Global Active Power", xlab = "Global Active Power (kilowatts)", col = "red", ylim = c(0,1200))
dev.off()
rm(list = ls())
source("plot1.R")
head(epcsubdata)
plot(epcsubdata$Date, epcsubdata$Global_active_power, type = "l")
plot(as.Date(epcsubdata$Date, format = "%d/%m/%Y"), epcsubdata$Global_active_power, type = "l")
plot(weekdays(as.Date(epcsubdata$Date, format = "%d/%m/%Y")), epcsubdata$Global_active_power, type = "l")
plot(epcsubdata$Time, epcsubdata$Global_active_power, type = "l")
plot(strptime(paste(epcsubdata$Date, epcsubdata$Time, sep = " "), format = "%d/%m/%Y %H:%M:%S"), epcsubdata$Global_active_power, type = "l")
plot(strptime(paste(epcsubdata$Date, epcsubdata$Time, sep = " "), format = "%d/%m/%Y %H:%M:%S"), epcsubdata$Global_active_power, type = "l", xlab = NULL)
plot(strptime(paste(epcsubdata$Date, epcsubdata$Time, sep = " "), format = "%d/%m/%Y %H:%M:%S"), epcsubdata$Global_active_power, type = "l", xlab = "")
plot(strptime(paste(epcsubdata$Date, epcsubdata$Time, sep = " "), format = "%d/%m/%Y %H:%M:%S"), epcsubdata$Global_active_power, type = "l", xlab = "", ylab = "Global Active Power (kilowatts")
Sys.setlocale("LC_ALL", "English")
plot(strptime(paste(epcsubdata$Date, epcsubdata$Time, sep = " "), format = "%d/%m/%Y %H:%M:%S"), epcsubdata$Global_active_power, type = "l", xlab = "", ylab = "Global Active Power (kilowatts")
rm(list = ls())
source("plot2.R")
source("plot2.R")
